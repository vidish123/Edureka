import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#Standard properties for graphs
plt.rcParams['font.size']= 14
plt.rcParams['lines.markersize']=7
plt.rcParams['axes.grid']=True
plt.rcParams['axes.labelsize']=16
plt.rcParams['figure.figsize']=(5,5)
#Here we have created the dataset in which there are number of flights taken by customer and average fare 
df=pd.DataFrame({
                'Num_flights': [12, 20, 28, 18, 29, 33, 24, 45, 45, 52, 51, 52, 55, 53, 55, 61, 64, 69, 72], 
                 'Avg_fare': [39, 36, 30, 52, 54, 46, 55, 59, 63, 70, 66, 63, 58, 23, 14, 8, 19, 7, 24]})
df=df[['Num_flights','Avg_fare']]
df.head()
#Here we have generated random centre points for 3 clusters
np.random.seed(200)
k = 3
centroids={i+1: [np.random.randint(0,80),np.random.randint(0,80)]
    for i in range(k)}
centroids
plt.scatter(df['Num_flights'],df['Avg_fare'],color = 'k')
colmap = {1: 'r' , 2: 'g', 3: 'b'}
for i in centroids.keys():
    plt.scatter(centroids[i][0], centroids[i][1], color = colmap[i], marker='*')
plt.xlabel('Num_flights')
plt.ylabel('Avg_fare')
plt.xlim(0,80)
plt.ylim(0,80)
plt.show()
def assignment(df, centroids):
    for i in centroids.keys():
        df['distance_from_{}'.format(i)]= (
            np.sqrt((df['Num_flights']-centroids[i][0])**2 + (df['Avg_fare'] - centroids[i][1])**2))
    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]
    df['closest']= df.loc[:, centroid_distance_cols].idxmin(axis=1)
    df['closest']= df['closest'].map(lambda x: int(x.lstrip('distance_from_')))
    df['color']=df['closest'].map(lambda x: colmap[x])
    return df
df = assignment(df, centroids)
df.head()
#Plotting the graph for above
plt.scatter(df['Num_flights'], df['Avg_fare'], color=df['color'],alpha=0.7)
for i in centroids.keys():
    plt.scatter(centroids[i][0], centroids[i][1], color=colmap[i],marker='*')
plt.xlim(0,80)
plt.ylim(0,80)
plt.xlabel('Num_flights')
plt.ylabel('Avg_fare')
plt.show()
#making copy of randomly created clusters
import copy
old_c = copy.deepcopy(centroids)
old_c
def update(k):
    for i in k.keys():
        k[i][0] = np.mean(df[df['closest']==i]['Num_flights'])
        k[i][1] = np.mean(df[df['closest']==i]['Avg_fare'])
    return k
#Printing both centroid i.e. first which is created randomly and second one after first iteration
centroids = update(centroids)
print('old centroids',old_c)
print('updated centroids', centroids)
#plotting the graph
ax = plt.axes()
plt.scatter(df['Num_flights'],df['Avg_fare'], color = df['color'], alpha=0.7)
for i in centroids.keys():
    old_x = old_c[i][0]
    old_y = old_c[i][1]
    dx = (centroids[i][0] - old_c[i][0]) *0.7
    dy = (centroids[i][1] - old_c[i][1]) *0.8
    #Drawing arrow to see the change
    ax.arrow(old_x, old_y, dx, dy, head_width=2, head_length=3, fc=colmap[i], ec=colmap[i])
plt.show()
#Repeating same step
df = assignment(df, centroids)
#plotting the results
plt.scatter(df['Num_flights'], df['Avg_fare'], color=df['color'],alpha=0.7)
for i in centroids.keys():
    plt.scatter(centroids[i][0], centroids[i][1], color=colmap[i],marker='*')
plt.xlim(0,80)
plt.ylim(0,80)
plt.xlabel('Num_flights')
plt.ylabel('Avg_fare')
plt.show()
    while True:
    closest_centroids = df['closest'].copy(deep=True)
    centroids = update(centroids)
    df = assignment(df, centroids)
    if closest_centroids.equals(df['closest']):
        break
#Plotting the graph
plt.scatter(df['Num_flights'], df['Avg_fare'], color=df['color'],alpha=0.7)
for i in centroids.keys():
    plt.scatter(centroids[i][0], centroids[i][1], color=colmap[i],marker='*')
plt.xlim(0,80)
plt.ylim(0,80)
plt.xlabel('Num_flights')
plt.ylabel('Avg_fare')
plt.show()
centroids
from sklearn.cluster import KMeans
df=pd.DataFrame({
                'Num_flights': [12, 20, 28, 18, 29, 33, 24, 45, 45, 52, 51, 52, 55, 53, 55, 61, 64, 69, 72], 
                 'Avg_fare': [39, 36, 30, 52, 54, 46, 55, 59, 63, 70, 66, 63, 58, 23, 14, 8, 19, 7, 24]})
df=df[['Num_flights','Avg_fare']]
df.head()
#Instantiated kmeans into a variable
kmeans = KMeans(n_clusters=3)
kmeans.fit(df)
labels=kmeans.predict(df)
labels
#This will give cordinates for centroid
sk_centroids = kmeans.cluster_centers_
sk_centroids
#From here we are going to find how to choose correct number of cluster
#This gives us sum of variance for each clusters 
kmeans.inertia_
#Plotting the graph
colors = map(lambda x: colmap[x+1], labels)
colors1 = list(colors)
plt.scatter(df['Num_flights'], df['Avg_fare'], color=colors1,alpha=0.7)
for idx, centroid in enumerate(sk_centroids):
    plt.scatter(centroid[0], centroid[1], color=colmap[idx+1],marker='*')
plt.xlim(0,80)
plt.ylim(0,80)
plt.xlabel('Num_flights')
plt.ylabel('Avg_fare')
plt.show()
#Here we are trying kmeans on different number of clusters on this dataset
inertia_list = []
for num_clusters in np.arange(1, 11):
    kmeans = KMeans(n_clusters=num_clusters)
    kmeans.fit(df)
    inertia_list.append(kmeans.inertia_)
inertia_list
#Plotting the graph for above
plt.figure(figsize=(10,5))
plt.plot(np.arange(1,11), inertia_list)
plt.xticks(np.arange(1,11))
plt.grid(True)
plt.show()
